// Rotas para a estante virtual
// PadrÃ£o de logs:
// ðŸ”µ InÃ­cio de operaÃ§Ã£o
// ðŸŸ¢ Sucesso
// ðŸŸ¡ Aviso/Fluxo alternativo
// ðŸ”´ Erro

const express = require('express');
const router = express.Router();
const VirtualBookShelfController = require('../controllers/VirtualBookShelfController');

// Middleware de autenticaÃ§Ã£o para rotas administrativas
const authenticateToken = require('../middlewares/authenticateToken');

// GET /api/virtual-bookshelf - ObtÃ©m configuraÃ§Ãµes das prateleiras
router.get('/', (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] GET / - Obtendo configuraÃ§Ãµes das prateleiras");
    VirtualBookShelfController.getShelvesConfig(req, res);
});

// PUT /api/virtual-bookshelf - Atualiza configuraÃ§Ãµes das prateleiras (admin only)
router.put('/', authenticateToken, (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] PUT / - Atualizando configuraÃ§Ãµes das prateleiras");
    // Verificar se Ã© admin
    if (req.user && req.user.role !== 'admin') {
        console.warn("ðŸŸ¡ [VirtualBookShelfRoutes] Acesso negado - usuÃ¡rio nÃ£o Ã© admin");
        return res.status(403).json({ error: 'Acesso negado. Apenas administradores podem atualizar configuraÃ§Ãµes.' });
    }
    VirtualBookShelfController.updateShelvesConfig(req, res);
});

// GET /api/virtual-bookshelf/books - ObtÃ©m todos os livros ordenados
router.get('/books', (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] GET /books - Obtendo livros ordenados");
    VirtualBookShelfController.getOrderedBooks(req, res);
});

// PUT /api/virtual-bookshelf/shelf-start - Atualiza cÃ³digo inicial de uma prateleira (admin only)
router.put('/shelf-start', authenticateToken, (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] PUT /shelf-start - Atualizando cÃ³digo inicial da prateleira");
    // Verificar se Ã© admin
    if (req.user && req.user.role !== 'admin') {
        console.warn("ðŸŸ¡ [VirtualBookShelfRoutes] Acesso negado - usuÃ¡rio nÃ£o Ã© admin");
        return res.status(403).json({ error: 'Acesso negado. Apenas administradores podem atualizar prateleiras.' });
    }
    VirtualBookShelfController.updateShelfStartCode(req, res);
});

// PUT /api/virtual-bookshelf/shelf-end - Atualiza cÃ³digo final de uma prateleira (admin only)
router.put('/shelf-end', authenticateToken, (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] PUT /shelf-end - Atualizando cÃ³digo final da prateleira");
    // Verificar se Ã© admin
    if (req.user && req.user.role !== 'admin') {
        console.warn("ðŸŸ¡ [VirtualBookShelfRoutes] Acesso negado - usuÃ¡rio nÃ£o Ã© admin");
        return res.status(403).json({ error: 'Acesso negado. Apenas administradores podem atualizar prateleiras.' });
    }
    VirtualBookShelfController.updateShelfEndCode(req, res);
});

// PUT /api/virtual-bookshelf/last-shelf - Configura prateleira como Ãºltima (admin only)
router.put('/last-shelf', authenticateToken, (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] PUT /last-shelf - Configurando Ãºltima prateleira");
    // Verificar se Ã© admin
    if (req.user && req.user.role !== 'admin') {
        console.warn("ðŸŸ¡ [VirtualBookShelfRoutes] Acesso negado - usuÃ¡rio nÃ£o Ã© admin");
        return res.status(403).json({ error: 'Acesso negado. Apenas administradores podem configurar prateleiras.' });
    }
    VirtualBookShelfController.setLastShelf(req, res);
});

// GET /api/virtual-bookshelf/validate - Valida um cÃ³digo de livro
router.get('/validate', (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] GET /validate - Validando cÃ³digo de livro");
    VirtualBookShelfController.validateBookCode(req, res);
});

// GET /api/virtual-bookshelf/shelf-books - ObtÃ©m livros de uma prateleira especÃ­fica
router.get('/shelf-books', (req, res) => {
    console.log("ðŸ”µ [VirtualBookShelfRoutes] GET /shelf-books - Obtendo livros da prateleira");
    VirtualBookShelfController.getBooksForShelf(req, res);
});

module.exports = router;