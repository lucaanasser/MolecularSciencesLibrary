// VirtualBookShelfController gerencia as operaÃ§Ãµes de controle para a estante virtual
// PadrÃ£o de logs:
// ðŸ”µ InÃ­cio de operaÃ§Ã£o
// ðŸŸ¢ Sucesso
// ðŸŸ¡ Aviso/Fluxo alternativo
// ðŸ”´ Erro

const VirtualBookShelfService = require('../services/VirtualBookShelfService');

class VirtualBookShelfController {

    /**
     * ObtÃ©m todas as configuraÃ§Ãµes de prateleiras
     */
    async getShelvesConfig(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] GET /api/virtual-bookshelf - Obtendo configuraÃ§Ãµes");
            const shelves = await VirtualBookShelfService.getShelvesConfig();
            console.log("ðŸŸ¢ [VirtualBookShelfController] ConfiguraÃ§Ãµes obtidas com sucesso");
            res.json(shelves);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao obter configuraÃ§Ãµes:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * Atualiza configuraÃ§Ãµes das prateleiras
     */
    async updateShelvesConfig(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] PUT /api/virtual-bookshelf - Atualizando configuraÃ§Ãµes");
            const { shelvesConfig } = req.body;
            
            if (!Array.isArray(shelvesConfig)) {
                return res.status(400).json({ error: 'shelvesConfig deve ser um array' });
            }

            const result = await VirtualBookShelfService.updateShelvesConfig(shelvesConfig);
            console.log("ðŸŸ¢ [VirtualBookShelfController] ConfiguraÃ§Ãµes atualizadas com sucesso");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao atualizar configuraÃ§Ãµes:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * ObtÃ©m todos os livros ordenados para a estante virtual
     */
    async getOrderedBooks(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] GET /api/virtual-bookshelf/books - Obtendo livros ordenados");
            const books = await VirtualBookShelfService.getAllBooksOrdered();
            console.log("ðŸŸ¢ [VirtualBookShelfController] Livros ordenados obtidos com sucesso");
            res.json(books);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao obter livros ordenados:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * Atualiza o cÃ³digo inicial de uma prateleira especÃ­fica
     */
    async updateShelfStartCode(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] PUT /api/virtual-bookshelf/shelf-start - Atualizando cÃ³digo inicial");
            const { shelf_number, shelf_row, book_code_start } = req.body;

            if (!shelf_number || !shelf_row) {
                return res.status(400).json({ error: 'shelf_number e shelf_row sÃ£o obrigatÃ³rios' });
            }

            const result = await VirtualBookShelfService.updateShelfStartCode(shelf_number, shelf_row, book_code_start);
            console.log("ðŸŸ¢ [VirtualBookShelfController] CÃ³digo inicial atualizado com sucesso");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao atualizar cÃ³digo inicial:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

        /**
     * Atualiza o cÃ³digo final de uma prateleira especÃ­fica (apenas para Ãºltima prateleira)
     */
    async updateShelfEndCode(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] PUT /api/virtual-bookshelf/shelf-end - Atualizando cÃ³digo final");
            const { shelf_number, shelf_row, book_code_end } = req.body;

            if (!shelf_number || !shelf_row) {
                return res.status(400).json({ error: 'shelf_number e shelf_row sÃ£o obrigatÃ³rios' });
            }

            const result = await VirtualBookShelfService.updateShelfEndCode(shelf_number, shelf_row, book_code_end);
            console.log("ðŸŸ¢ [VirtualBookShelfController] CÃ³digo final atualizado com sucesso");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao atualizar cÃ³digo final:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

    /**
     * Configura uma prateleira como Ãºltima da estante
     */
    async setLastShelf(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] PUT /api/virtual-bookshelf/last-shelf - Configurando Ãºltima prateleira");
            const { shelf_number, shelf_row, is_last_shelf } = req.body;

            if (!shelf_number || !shelf_row) {
                return res.status(400).json({ error: 'shelf_number e shelf_row sÃ£o obrigatÃ³rios' });
            }

            const result = await VirtualBookShelfService.setLastShelf(shelf_number, shelf_row, is_last_shelf);
            console.log("ðŸŸ¢ [VirtualBookShelfController] ConfiguraÃ§Ã£o de Ãºltima prateleira atualizada");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao configurar Ãºltima prateleira:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * Valida um cÃ³digo de livro
     */
    async validateBookCode(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] GET /api/virtual-bookshelf/validate - Validando cÃ³digo");
            const { bookCode } = req.query;

            if (!bookCode) {
                return res.status(400).json({ error: 'bookCode Ã© obrigatÃ³rio' });
            }

            const result = await VirtualBookShelfService.validateBookCode(bookCode);
            console.log("ðŸŸ¢ [VirtualBookShelfController] ValidaÃ§Ã£o realizada com sucesso");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao validar cÃ³digo:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * ObtÃ©m livros para uma prateleira especÃ­fica
     */
    async getBooksForShelf(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] GET /api/virtual-bookshelf/shelf-books - Obtendo livros da prateleira");
            const { shelf_number, shelf_row } = req.query;

            if (!shelf_number || !shelf_row) {
                return res.status(400).json({ error: 'shelf_number e shelf_row sÃ£o obrigatÃ³rios' });
            }

            // Busca a configuraÃ§Ã£o da prateleira e todas as prateleiras
            const allShelves = await VirtualBookShelfService.getShelvesConfig();
            const shelf = allShelves.find(s => 
                s.shelf_number == shelf_number && s.shelf_row == shelf_row
            );

            if (!shelf) {
                return res.status(404).json({ error: 'Prateleira nÃ£o encontrada' });
            }

            const books = await VirtualBookShelfService.getBooksForShelf(shelf, allShelves);
            console.log("ðŸŸ¢ [VirtualBookShelfController] Livros da prateleira obtidos com sucesso");
            res.json(books);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao obter livros da prateleira:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * Adiciona uma nova prateleira a uma estante existente ou nova estante
     */
    async addShelf(req, res) {
        try {
            console.log("ðŸ”µ [VirtualBookShelfController] POST /api/virtual-bookshelf/shelf - Adicionando nova prateleira");
            const { shelf_number, shelf_row, book_code_start, book_code_end, is_last_shelf } = req.body;
            if (!shelf_number || !shelf_row) {
                return res.status(400).json({ error: 'shelf_number e shelf_row sÃ£o obrigatÃ³rios' });
            }
            const result = await VirtualBookShelfService.addShelf({
                shelf_number,
                shelf_row,
                book_code_start,
                book_code_end,
                is_last_shelf
            });
            console.log("ðŸŸ¢ [VirtualBookShelfController] Nova prateleira adicionada com sucesso");
            res.json(result);
        } catch (error) {
            console.error("ðŸ”´ [VirtualBookShelfController] Erro ao adicionar prateleira:", error.message);
            res.status(400).json({ error: error.message });
        }
    }
}

module.exports = new VirtualBookShelfController();