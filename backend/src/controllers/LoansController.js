const LoansService = require('../services/LoansService');

/**
 * Controller responsÃ¡vel pelas operaÃ§Ãµes de emprÃ©stimo de livros.
 * PadrÃ£o de logs:
 * ðŸ”µ InÃ­cio de operaÃ§Ã£o
 * ðŸŸ¢ Sucesso
 * ðŸŸ¡ Aviso/Fluxo alternativo
 * ðŸ”´ Erro
 */
const LoansController = {
    // Cria um novo emprÃ©stimo
    borrowBook: async (req, res) => {
        const { book_id, NUSP, password } = req.body;
        console.log(`ðŸ”µ [LoansController] Iniciando criaÃ§Ã£o de emprÃ©stimo: book_id=${book_id}, NUSP=${NUSP}`);
        if (!book_id || !NUSP || !password) {
            console.warn(`ðŸŸ¡ [LoansController] Dados obrigatÃ³rios ausentes: book_id=${book_id}, NUSP=${NUSP}`);
            return res.status(400).json({ error: 'book_id, NUSP e password sÃ£o obrigatÃ³rios' });
        }
        try {
            const loan = await LoansService.borrowBook(book_id, NUSP, password);
            console.log(`ðŸŸ¢ [LoansController] EmprÃ©stimo criado com sucesso:`, loan);
            res.status(201).json(loan);
        } catch (err) {
            console.error(`ðŸ”´ [LoansController] Erro ao criar emprÃ©stimo: ${err.message}`);
            res.status(400).json({ error: err.message });
        }
    },

    // Lista todos os emprÃ©stimos com detalhes
    listLoans: async (req, res) => {
        console.log("ðŸ”µ [LoansController] Listando todos os emprÃ©stimos");
        try {
            const loans = await LoansService.listLoans();
            console.log(`ðŸŸ¢ [LoansController] EmprÃ©stimos encontrados: ${loans.length}`);
            res.json(loans);
        } catch (err) {
            console.error(`ðŸ”´ [LoansController] Erro ao listar emprÃ©stimos: ${err.message}`);
            res.status(500).json({ error: err.message });
        }
    },

    // Lista emprÃ©stimos de um usuÃ¡rio especÃ­fico
    listLoansByUser: async (req, res) => {
        const userId = req.params.userId;
        console.log(`ðŸ”µ [LoansController] Listando emprÃ©stimos do usuÃ¡rio: userId=${userId}`);
        if (!userId) {
            console.warn("ðŸŸ¡ [LoansController] userId nÃ£o fornecido");
            return res.status(400).json({ error: 'userId Ã© obrigatÃ³rio' });
        }
        try {
            const loans = await LoansService.listLoansByUser(userId);
            console.log(`ðŸŸ¢ [LoansController] EmprÃ©stimos do usuÃ¡rio ${userId} encontrados: ${loans.length}`);
            res.json(loans);
        } catch (err) {
            console.error(`ðŸ”´ [LoansController] Erro ao listar emprÃ©stimos do usuÃ¡rio: ${err.message}`);
            res.status(500).json({ error: err.message });
        }
    },

    // Registra devoluÃ§Ã£o de um emprÃ©stimo
    // Agora nÃ£o exige mais NUSP/senha, apenas o book_id
    returnBook: async (req, res) => {
        const { book_id } = req.body;
        console.log(`ðŸ”µ [LoansController] Iniciando devoluÃ§Ã£o: book_id=${book_id}`);
        if (!book_id) {
            console.warn("ðŸŸ¡ [LoansController] book_id nÃ£o fornecido para devoluÃ§Ã£o");
            return res.status(400).json({ error: 'book_id Ã© obrigatÃ³rio' });
        }
        try {
            // Busca o emprÃ©stimo ativo para o livro
            const result = await LoansService.returnBookByBookId(book_id);
            console.log(`ðŸŸ¢ [LoansController] DevoluÃ§Ã£o registrada com sucesso:`, result);
            res.json(result);
        } catch (err) {
            console.error(`ðŸ”´ [LoansController] Erro ao registrar devoluÃ§Ã£o: ${err.message}`);
            res.status(400).json({ error: err.message });
        }
    },

    // Lista todos os emprÃ©stimos ativos com status de atraso
    listActiveLoansWithOverdue: async (req, res) => {
        console.log("ðŸ”µ [LoansController] Listando emprÃ©stimos ativos com status de atraso");
        try {
            const loans = await LoansService.listActiveLoansWithOverdue();
            res.json(loans);
        } catch (err) {
            console.error(`ðŸ”´ [LoansController] Erro ao listar emprÃ©stimos ativos: ${err.message}`);
            res.status(500).json({ error: err.message });
        }
    }
};

module.exports = LoansController;