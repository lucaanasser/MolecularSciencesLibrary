const usersService = require('../services/UsersService');

/**
 * Controller respons치vel por gerenciar as requisi칞칫es relacionadas a usu치rios.
 * Inclui cria칞칚o, autentica칞칚o, busca, listagem, dele칞칚o e perfil do usu치rio autenticado.
 */
class UsersController {
    /**
     * Cria um novo usu치rio.
     * Espera receber name, email, password, role e NUSP no corpo da requisi칞칚o.
     */
    async createUser(req, res) {
        try {
            console.log("游댯 [createUser] Dados recebidos:", req.body);
            const { name, email, phone, role, NUSP, profile_image, class: userClass } = req.body;
            if (!name || !email || !phone || !role || !NUSP) {
                console.warn("游리 [createUser] Campos obrigat칩rios faltando.");
                return res.status(400).json({ error: 'Todos os campos s칚o obrigat칩rios, incluindo telefone.' });
            }
            // Valida칞칚o simples de telefone (pode ser aprimorada)
            if (!/^\+?\d{10,15}$/.test(phone)) {
                return res.status(400).json({ error: 'Telefone inv치lido. Informe DDD e n칰mero.' });
            }
            const user = await usersService.createUser({ name, email, phone, role, NUSP, profile_image, class: userClass });
            console.log("游릭 [createUser] Usu치rio criado com sucesso:", user);
            res.status(201).json(user);
        } catch (error) {
            console.error("游댮 [createUser] Erro ao criar usu치rio:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

    /**
     * Autentica um usu치rio usando email ou NUSP e senha.
     * Retorna o usu치rio autenticado e o token JWT.
     */
    async authenticateUser(req, res) {
        try {
            console.log("游댯 [authenticateUser] Dados recebidos: email/NUSP recebido");
            const { email, NUSP, password } = req.body;
            if ((!email && !NUSP) || !password) {
                console.warn("游리 [authenticateUser] Email/NUSP ou senha n칚o fornecidos.");
                return res.status(400).json({ error: 'Email ou NUSP e senha s칚o obrigat칩rios.' });
            }
            const login = email || NUSP;
            // Autentica (gera token) usando service
            const authResult = await usersService.authenticateUser(login, password);
            // Verifica칞칚o de IP se role for proaluno
            if (authResult.role === 'proaluno') {
                // Obt칠m IP real considerando proxy
                const rawIp = (req.headers['x-forwarded-for'] || req.ip || '').split(',')[0].trim();
                const clientIp = rawIp.replace('::ffff:', '');
                const allowedIp = process.env.KIOSK_ALLOWED_IP || '143.107.90.22';
                console.log(`游댌 [authenticateUser] Verificando IP para proaluno: clientIp=${clientIp} allowedIp=${allowedIp}`);
                if (clientIp !== allowedIp) {
                    console.warn(`游리 [authenticateUser] Login bloqueado para proaluno a partir de IP n칚o autorizado: ${clientIp}`);
                    return res.status(403).json({ error: 'IP n칚o autorizado para este usu치rio.' });
                }
            }
            console.log("游릭 [authenticateUser] Usu치rio autenticado: id:", authResult.id, "NUSP:", authResult.NUSP, "email:", authResult.email);
            res.status(200).json(authResult);
        } catch (error) {
            console.error("游댮 [authenticateUser] Falha na autentica칞칚o:", error.message);
            res.status(401).json({ error: error.message });
        }
    }

    /**
     * Busca um usu치rio pelo ID fornecido nos par칙metros da rota.
     */
    async getUserById(req, res) {
        try {
            const { id } = req.params;
            console.log("游댯 [getUserById] Buscando usu치rio por id:", id);
            const user = await usersService.getUserById(id);
            // Nunca logar objeto completo do usu치rio
            console.log("游릭 [getUserById] Usu치rio encontrado: id:", user.id, "NUSP:", user.NUSP, "email:", user.email);
            res.status(200).json(user);
        } catch (error) {
            console.error("游댮 [getUserById] Usu치rio n칚o encontrado:", error.message);
            res.status(404).json({ error: error.message });
        }
    }

    /**
     * Lista todos os usu치rios cadastrados.
     */
    async getAllUsers(req, res) {
        try {
            console.log("游댯 [getAllUsers] Listando todos os usu치rios.");
            const users = await usersService.getAllUsers();
            // Nunca logar objetos completos dos usu치rios
            console.log("游릭 [getAllUsers] Usu치rios encontrados:", users.length);
            res.status(200).json(users);
        } catch (error) {
            console.error("游댮 [getAllUsers] Erro ao listar usu치rios:", error.message);
            res.status(500).json({ error: error.message });
        }
    }

    /**
     * Deleta um usu치rio pelo ID fornecido nos par칙metros da rota.
     */
    async deleteUserById(req, res) {
        try {
            const { id } = req.params;
            console.log("游댯 [deleteUserById] Deletando usu치rio id:", id);
            await usersService.deleteUserById(id);
            console.log("游릭 [deleteUserById] Usu치rio deletado com sucesso:", id);
            res.status(204).send();
        } catch (error) {
            console.error("游댮 [deleteUserById] Erro ao deletar usu치rio:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

    /**
     * Retorna o perfil do usu치rio autenticado, usando o payload do token JWT.
     */
    async getProfile(req, res) {
        try {
            console.log("游댯 [getProfile] Token payload recebido: id:", req.user.id, "NUSP:", req.user.NUSP);
            let user = null;
            if (req.user.id) {
                user = await usersService.getUserById(req.user.id);
                // Nunca logar objeto completo do usu치rio
                console.log("游릭 [getProfile] Busca por id:", req.user.id, "Resultado: id:", user.id, "NUSP:", user.NUSP, "email:", user.email);
            }
            if (!user && req.user.NUSP) {
                user = await usersService.getUserByNUSP(req.user.NUSP);
                console.log("游리 [getProfile] Busca por NUSP:", req.user.NUSP, "Resultado: id:", user.id, "NUSP:", user.NUSP, "email:", user.email);
            }
            if (!user) throw new Error('Usu치rio n칚o encontrado');
            res.status(200).json(user);
        } catch (error) {
            console.error("游댮 [getProfile] Erro:", error.message);
            res.status(404).json({ error: error.message });
        }
    }

    /**
     * Endpoint para solicitar redefini칞칚o de senha
     */
    async requestPasswordReset(req, res) {
        try {
            const { login } = req.body;
            if (!login) {
                return res.status(400).json({ error: 'Email ou NUSP s칚o obrigat칩rios.' });
            }
            await usersService.requestPasswordReset(login);
            res.status(200).json({ message: 'Se o usu치rio existir, um email foi enviado com instru칞칫es para redefinir a senha.' });
        } catch (error) {
            console.error("游댮 [requestPasswordReset] Erro:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

    /**
     * Endpoint para redefinir a senha usando token
     */
    async resetPassword(req, res) {
        try {
            const { token, newPassword } = req.body;
            if (!token || !newPassword) {
                return res.status(400).json({ error: 'Token e nova senha s칚o obrigat칩rios.' });
            }
            await usersService.resetPassword({ token, newPassword });
            res.status(200).json({ message: 'Senha redefinida com sucesso.' });
        } catch (error) {
            console.error("游댮 [resetPassword] Erro:", error.message);
            res.status(400).json({ error: error.message });
        }
    }

    /**
     * Atualiza a imagem de perfil do usu치rio autenticado
     */
    async updateProfileImage(req, res) {
        try {
            const userId = req.user.id;
            const { profile_image } = req.body;
            console.log("游댯 [UsersController] updateProfileImage chamada com:", { userId, profile_image });
            if (!profile_image) {
                return res.status(400).json({ error: 'Imagem de perfil 칠 obrigat칩ria.' });
            }
            await usersService.updateUserProfileImage(userId, profile_image);
            res.status(200).json({ message: 'Imagem de perfil atualizada com sucesso.' });
        } catch (error) {
            console.error("游댮 [updateProfileImage] Erro:", error.message);
            res.status(400).json({ error: error.message });
        }
    }
}

module.exports = new UsersController();