const { executeQuery, getQuery, allQuery } = require('../database/db');

/**
 * Modelo para operaÃ§Ãµes no banco de dados relacionadas a notificaÃ§Ãµes.
 * PadrÃ£o de logs:
 * ðŸ”µ InÃ­cio de operaÃ§Ã£o
 * ðŸŸ¢ Sucesso
 * ðŸŸ¡ Aviso/Fluxo alternativo
 * ðŸ”´ Erro
 */
class NotificationsModel {
    async createNotification({ user_id, type, message, metadata, status = 'unread', loan_id = null }) {
        console.log("ðŸ”µ [NotificationsModel] Criando notificaÃ§Ã£o:", { user_id, type, message });
        const query = `
            INSERT INTO notifications (user_id, type, message, metadata, loan_id, status, created_at)
            VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        `;
        const params = [user_id, type, message, metadata ? JSON.stringify(metadata) : null, loan_id, status];
        try {
            const id = await executeQuery(query, params);
            console.log("ðŸŸ¢ [NotificationsModel] NotificaÃ§Ã£o criada:", id);
            return id;
        } catch (error) {
            console.error("ðŸ”´ [NotificationsModel] Erro ao criar notificaÃ§Ã£o:", error.message);
            throw error;
        }
    }

    async getNotificationsByUser(user_id) {
        console.log("ðŸ”µ [NotificationsModel] Buscando notificaÃ§Ãµes do usuÃ¡rio:", user_id);
        const query = `
            SELECT * FROM notifications
            WHERE user_id = ?
            ORDER BY created_at DESC
        `;
        try {
            const notifications = await allQuery(query, [user_id]);
            console.log("ðŸŸ¢ [NotificationsModel] NotificaÃ§Ãµes encontradas:", notifications.length);
            return notifications;
        } catch (error) {
            console.error("ðŸ”´ [NotificationsModel] Erro ao buscar notificaÃ§Ãµes:", error.message);
            throw error;
        }
    }

    async markAsRead(notification_id) {
        console.log("ðŸ”µ [NotificationsModel] Marcando notificaÃ§Ã£o como lida:", notification_id);
        const query = `
            UPDATE notifications SET status = 'read' WHERE id = ?
        `;
        try {
            await executeQuery(query, [notification_id]);
            console.log("ðŸŸ¢ [NotificationsModel] NotificaÃ§Ã£o marcada como lida:", notification_id);
        } catch (error) {
            console.error("ðŸ”´ [NotificationsModel] Erro ao marcar notificaÃ§Ã£o como lida:", error.message);
            throw error;
        }
    }

    // Exclui notificaÃ§Ã£o apenas para o usuÃ¡rio (soft delete)
    async deleteForUser(notification_id, user_id) {
        console.log("ðŸ”µ [NotificationsModel] Excluindo notificaÃ§Ã£o para o usuÃ¡rio:", notification_id, user_id);
        // Marca como 'deleted' para o usuÃ¡rio, mas mantÃ©m no banco
        const query = `UPDATE notifications SET status = 'deleted' WHERE id = ? AND user_id = ?`;
        try {
            await executeQuery(query, [notification_id, user_id]);
            console.log("ðŸŸ¢ [NotificationsModel] NotificaÃ§Ã£o marcada como deletada para o usuÃ¡rio:", notification_id);
        } catch (error) {
            console.error("ðŸ”´ [NotificationsModel] Erro ao deletar notificaÃ§Ã£o para o usuÃ¡rio:", error.message);
            throw error;
        }
    }

    // Busca todas as notificaÃ§Ãµes, com filtro opcional por usuÃ¡rio
    async getAllNotifications({ user_id } = {}) {
        console.log("ðŸ”µ [NotificationsModel] Buscando todas as notificaÃ§Ãµes", user_id ? `do usuÃ¡rio: ${user_id}` : "(todas)");
        let query = `SELECT * FROM notifications`;
        let params = [];
        if (user_id) {
            query += ` WHERE user_id = ?`;
            params.push(user_id);
        }
        query += ` ORDER BY created_at DESC`;
        try {
            const notifications = await allQuery(query, params);
            console.log("ðŸŸ¢ [NotificationsModel] NotificaÃ§Ãµes encontradas:", notifications.length);
            return notifications;
        } catch (error) {
            console.error("ðŸ”´ [NotificationsModel] Erro ao buscar todas as notificaÃ§Ãµes:", error.message);
            throw error;
        }
    }
}

module.exports = new NotificationsModel();