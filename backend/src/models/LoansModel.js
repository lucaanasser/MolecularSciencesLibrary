const sqlite3 = require('sqlite3');
const dbPath = process.env.DATABASE_URL?.replace('sqlite://', '') || 'app/database/library.db';

/**
 * Model responsÃ¡vel pelo acesso ao banco de dados para emprÃ©stimos de livros.
 * PadrÃ£o de logs:
 * ðŸ”µ InÃ­cio de operaÃ§Ã£o
 * ðŸŸ¢ Sucesso
 * ðŸŸ¡ Aviso/Fluxo alternativo
 * ðŸ”´ Erro
 */
function getDb() {
    return new sqlite3.Database(dbPath);
}

module.exports = {
    // Cria um novo emprÃ©stimo
    createLoan: (book_id, student_id, due_date) => {
        console.log(`ðŸ”µ [LoansModel] Criando emprÃ©stimo: book_id=${book_id}, student_id=${student_id}`);
        let dueDateSql = due_date;
        if (due_date && typeof due_date === 'string') {
            // Remove o 'T' e o 'Z' do ISO, pega sÃ³ a parte relevante
            dueDateSql = due_date.replace('T', ' ').replace(/\..*$/, '');
        }
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.run(
                `INSERT INTO loans (book_id, student_id, due_date) VALUES (?, ?, ?)`,
                [book_id, student_id, dueDateSql],
                function (err) {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao criar emprÃ©stimo: ${err.message}`);
                        reject(err);
                    }
                    else {
                        console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimo criado com id: ${this.lastID}`);
                        resolve({ id: this.lastID });
                    }
                }
            );
        });
    },

    // Busca todos os emprÃ©stimos com detalhes do usuÃ¡rio e do livro
    getLoansWithDetails: () => {
        console.log("ðŸ”µ [LoansModel] Buscando todos os emprÃ©stimos com detalhes");
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.all(
                `SELECT l.id as loan_id, l.book_id, l.student_id, l.borrowed_at, l.returned_at, l.renewals, l.due_date,
                        u.name as user_name, u.email as user_email,
                        b.title as book_title, b.authors as book_authors
                 FROM loans l
                 LEFT JOIN users u ON l.student_id = u.id
                 LEFT JOIN books b ON l.book_id = b.id
                 ORDER BY l.borrowed_at DESC`,
                [],
                (err, rows) => {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao buscar emprÃ©stimos: ${err.message}`);
                        reject(err);
                    }
                    else {
                        console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimos encontrados: ${rows.length}`);
                        resolve(rows);
                    }
                }
            );
        });
    },

    // Busca emprÃ©stimos de um usuÃ¡rio especÃ­fico
    getLoansByUser: (user_id) => {
        console.log(`ðŸ”µ [LoansModel] Buscando emprÃ©stimos do usuÃ¡rio: ${user_id}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.all(
                `SELECT l.id as loan_id, l.book_id, l.student_id, l.borrowed_at, l.returned_at, l.renewals, l.due_date,
                        b.title as book_title, b.authors as book_authors
                 FROM loans l
                 LEFT JOIN books b ON l.book_id = b.id
                 WHERE l.student_id = ?
                 ORDER BY l.borrowed_at DESC`,
                [user_id],
                (err, rows) => {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao buscar emprÃ©stimos do usuÃ¡rio: ${err.message}`);
                        reject(err);
                    }
                    else {
                        resolve(rows);
                    }
                }
            );
        });
    },

    // Registra devoluÃ§Ã£o de um emprÃ©stimo
    returnLoan: (loan_id) => {
        console.log(`ðŸ”µ [LoansModel] Registrando devoluÃ§Ã£o do emprÃ©stimo: loan_id=${loan_id}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.run(
                `UPDATE loans SET returned_at = CURRENT_TIMESTAMP WHERE id = ? AND returned_at IS NULL`,
                [loan_id],
                function (err) {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao registrar devoluÃ§Ã£o: ${err.message}`);
                        reject(err);
                    }
                    else {
                        console.log(`ðŸŸ¢ [LoansModel] DevoluÃ§Ã£o registrada para emprÃ©stimo id: ${loan_id}`);
                        resolve({ updated: this.changes });
                    }
                }
            );
        });
    },

    // Devolve um emprÃ©stimo
    returnBook: (loan_id) => {
        console.log(`ðŸ”µ [LoansModel] Devolvendo emprÃ©stimo: loan_id=${loan_id}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.run(
                `UPDATE loans SET returned_at = CURRENT_TIMESTAMP WHERE id = ? AND returned_at IS NULL`,
                [loan_id],
                function (err) {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao devolver emprÃ©stimo: ${err.message}`);
                        reject(err);
                    } else if (this.changes === 0) {
                        reject(new Error('EmprÃ©stimo nÃ£o encontrado ou jÃ¡ devolvido.'));
                    } else {
                        console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimo devolvido com sucesso: loan_id=${loan_id}`);
                        resolve();
                    }
                }
            );
        });
    },

    // Verifica se existe emprÃ©stimo ativo para um livro
    hasActiveLoan: (book_id) => {
        console.log(`ðŸ”µ [LoansModel] Verificando emprÃ©stimo ativo para book_id=${book_id}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.get(
                `SELECT id FROM loans WHERE book_id = ? AND returned_at IS NULL`,
                [book_id],
                (err, row) => {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao verificar emprÃ©stimo ativo: ${err.message}`);
                        reject(err);
                    }
                    else {
                        if (row) {
                            console.warn(`ðŸŸ¡ [LoansModel] Livro ${book_id} jÃ¡ estÃ¡ emprestado`);
                        } else {
                            console.log(`ðŸŸ¢ [LoansModel] Livro ${book_id} disponÃ­vel para emprÃ©stimo`);
                        }
                        resolve(!!row); // true se existe emprÃ©stimo ativo
                    }
                }
            );
        });
    },

    // Busca emprÃ©stimo ativo de um usuÃ¡rio para um livro
    getActiveLoanByUserAndBook: (user_id, book_id) => {
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.get(
                `SELECT id as loan_id FROM loans WHERE student_id = ? AND book_id = ? AND returned_at IS NULL`,
                [user_id, book_id],
                (err, row) => {
                    db.close();
                    if (err) {
                        reject(err);
                    } else {
                        resolve(row);
                    }
                }
            );
        });
    },

    // Busca todos os emprÃ©stimos ativos (nÃ£o devolvidos) com detalhes do usuÃ¡rio e do livro
    getActiveLoansWithDetails: () => {
        console.log("ðŸ”µ [LoansModel] Buscando emprÃ©stimos ativos com detalhes");
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.all(
                `SELECT l.id as loan_id, l.book_id, l.student_id, l.borrowed_at, l.returned_at, l.renewals, l.due_date,
                        u.name as user_name, u.email as user_email,
                        b.title as book_title, b.authors as book_authors
                 FROM loans l
                 LEFT JOIN users u ON l.student_id = u.id
                 LEFT JOIN books b ON l.book_id = b.id
                 WHERE l.returned_at IS NULL
                 ORDER BY l.borrowed_at DESC`,
                [],
                (err, rows) => {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao buscar emprÃ©stimos ativos: ${err.message}`);
                        reject(err);
                    }
                    else {
                        console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimos ativos encontrados: ${rows.length}`);
                        resolve(rows);
                    }
                }
            );
        });
    },

    // Busca emprÃ©stimo ativo para um livro (independente do usuÃ¡rio)
    getActiveLoanByBookId: (bookId) => {
        console.log(`ðŸ”µ [LoansModel] Buscando emprÃ©stimo ativo para o livro ${bookId}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.get(
                `SELECT id as loan_id FROM loans WHERE book_id = ? AND returned_at IS NULL`,
                [bookId],
                (err, row) => {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao buscar emprÃ©stimo ativo: ${err.message}`);
                        reject(err);
                    }
                    else {
                        if (row) {
                            console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimo ativo encontrado:`, row);
                        } else {
                            console.warn(`ðŸŸ¡ [LoansModel] Nenhum emprÃ©stimo ativo encontrado para o livro ${bookId}`);
                        }
                        resolve(row);
                    }
                }
            );
        });
    },

    // Renova um emprÃ©stimo
    renewLoan: (loan_id, renewal_days) => {
        console.log(`ðŸ”µ [LoansModel] Renovando emprÃ©stimo: loan_id=${loan_id}, renewal_days=${renewal_days}`);
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.run(
                `UPDATE loans SET renewals = renewals + 1, due_date = datetime(due_date, '+' || ? || ' days') WHERE id = ? AND returned_at IS NULL`,
                [renewal_days, loan_id],
                function (err) {
                    db.close();
                    if (err) {
                        console.error(`ðŸ”´ [LoansModel] Erro ao renovar emprÃ©stimo: ${err.message}`);
                        reject(err);
                    } else if (this.changes === 0) {
                        reject(new Error('EmprÃ©stimo nÃ£o encontrado ou jÃ¡ devolvido.'));
                    } else {
                        console.log(`ðŸŸ¢ [LoansModel] EmprÃ©stimo renovado com sucesso: loan_id=${loan_id}`);
                        resolve();
                    }
                }
            );
        });
    },

    // Verifica se um livro estÃ¡ emprestado
    isBookLoaned: (book_id) => {
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.get(
                `SELECT id FROM loans WHERE book_id = ? AND returned_at IS NULL`,
                [book_id],
                (err, row) => {
                    db.close();
                    if (err) {
                        reject(err);
                    } else {
                        resolve(!!row);
                    }
                }
            );
        });
    },

    // Busca todos os emprÃ©stimos ativos (nÃ£o devolvidos)
    getActiveLoans: () => {
        return new Promise((resolve, reject) => {
            const db = getDb();
            db.all(
                `SELECT l.id as loan_id, l.book_id, l.student_id, l.borrowed_at, l.returned_at, l.renewals, l.due_date,
                        u.name as user_name, u.email as user_email,
                        b.title as book_title, b.authors as book_authors
                 FROM loans l
                 LEFT JOIN users u ON l.student_id = u.id
                 LEFT JOIN books b ON l.book_id = b.id
                 WHERE l.returned_at IS NULL
                 ORDER BY l.borrowed_at DESC`,
                [],
                (err, rows) => {
                    db.close();
                    if (err) {
                        reject(err);
                    } else {
                        resolve(rows);
                    }
                }
            );
        });
    },
};