const LoansModel = require('../models/LoansModel');
const UsersModel = require('../models/UsersModel');
const BooksModel = require('../models/BooksModel');
const bcrypt = require('bcrypt');
const RulesService = require('./RulesService');
const EmailService = require('./EmailService');

/**
 * Service responsÃ¡vel pela lÃ³gica de negÃ³cio dos emprÃ©stimos de livros.
 * PadrÃ£o de logs:
 * ðŸ”µ InÃ­cio de operaÃ§Ã£o
 * ðŸŸ¢ Sucesso
 * ðŸŸ¡ Aviso/Fluxo alternativo
 * ðŸ”´ Erro
 */
class LoansService {
    // Cria um novo emprÃ©stimo
    async borrowBook(book_id, NUSP, password) {
        console.log(`ðŸ”µ [LoansService] Iniciando emprÃ©stimo para NUSP: ${NUSP}, book_id: ${book_id}`);

        // 1. Verifica se o usuÃ¡rio existe pelo NUSP
        const user = await UsersModel.getUserByNUSP(NUSP);
        if (!user) {
            console.warn(`ðŸŸ¡ [LoansService] UsuÃ¡rio NUSP ${NUSP} nÃ£o encontrado`);
            throw new Error('UsuÃ¡rio nÃ£o encontrado');
        }

        // 2. Verifica se a senha estÃ¡ correta
        const passwordMatch = await bcrypt.compare(password, user.password_hash);
        if (!passwordMatch) {
            console.warn(`ðŸŸ¡ [LoansService] Senha incorreta para NUSP ${NUSP}`);
            throw new Error('Senha incorreta');
        }

        // 2.1. Verifica se o usuÃ¡rio jÃ¡ atingiu o limite de emprÃ©stimos ativos
        const userLoans = await LoansModel.getLoansByUser(user.id);
        const activeLoans = userLoans.filter(l => !l.returned_at);
        const rules = await RulesService.getRules();
        const MAX_ACTIVE_LOANS = rules.max_books_per_user || 5;
        if (activeLoans.length >= MAX_ACTIVE_LOANS) {
            console.warn(`ðŸŸ¡ [LoansService] UsuÃ¡rio ${NUSP} jÃ¡ atingiu o limite de ${MAX_ACTIVE_LOANS} emprÃ©stimos ativos.`);
            throw new Error(`Limite de ${MAX_ACTIVE_LOANS} emprÃ©stimos ativos atingido.`);
        }

        // 3. Verifica se o livro existe
        const book = await BooksModel.getBookById(book_id);
        if (!book) {
            console.warn(`ðŸŸ¡ [LoansService] Livro id ${book_id} nÃ£o encontrado`);
            throw new Error('Livro nÃ£o encontrado');
        }

        // 4. Verifica se NÃƒO existe emprÃ©stimo ativo para este livro
        const emprestimoAtivo = await LoansModel.hasActiveLoan(book_id);
        if (emprestimoAtivo) {
            console.warn(`ðŸŸ¡ [LoansService] Livro ${book_id} jÃ¡ estÃ¡ emprestado`);
            throw new Error('Este livro jÃ¡ estÃ¡ emprestado');
        }

        // 5. Cria o emprÃ©stimo
        const loan = await LoansModel.createLoan(book_id, user.id);
        console.log(`ðŸŸ¢ [LoansService] EmprÃ©stimo criado com sucesso:`, loan);

        // Calcula a data de devoluÃ§Ã£o conforme as regras (use a mesma variÃ¡vel 'rules')
        const maxDays = rules.max_days || 7;
        const borrowedAt = new Date();
        const dueDate = new Date(borrowedAt);
        dueDate.setDate(borrowedAt.getDate() + maxDays);
        const dueDateStr = dueDate.toLocaleDateString('pt-BR');

        // Envia email de confirmaÃ§Ã£o de novo emprÃ©stimo
        await EmailService.sendNotificationEmail({
            user_id: user.id,
            type: 'novo_emprestimo',
            subject: 'Novo emprÃ©stimo realizado na Biblioteca CM',
            message: `VocÃª realizou um novo emprÃ©stimo do livro "${book.title}". Data de devoluÃ§Ã£o: ${dueDateStr}. Fique atento ao prazo!`,
        });

        return loan;
    }

    // Lista todos os emprÃ©stimos com detalhes
    async listLoans() {
        console.log("ðŸ”µ [LoansService] Listando todos os emprÃ©stimos");
        const loans = await LoansModel.getLoansWithDetails();
        console.log(`ðŸŸ¢ [LoansService] EmprÃ©stimos encontrados: ${loans.length}`);
        return loans;
    }

    // Lista emprÃ©stimos de um usuÃ¡rio especÃ­fico
    async listLoansByUser(userId) {
        console.log(`ðŸ”µ [LoansService] Listando emprÃ©stimos do usuÃ¡rio: userId=${userId}`);
        const loans = await LoansModel.getLoansByUser(userId);
        console.log(`ðŸŸ¢ [LoansService] EmprÃ©stimos do usuÃ¡rio ${userId} encontrados: ${loans.length}`);
        return loans;
    }

    // Registra devoluÃ§Ã£o de um emprÃ©stimo
    async returnBook(loan_id) {
        console.log(`ðŸ”µ [LoansService] Registrando devoluÃ§Ã£o do emprÃ©stimo: loan_id=${loan_id}`);
        const result = await LoansModel.returnLoan(loan_id);
        console.log(`ðŸŸ¢ [LoansService] DevoluÃ§Ã£o registrada:`, result);
        return result;
    }

    // Registra devoluÃ§Ã£o de um emprÃ©stimo autenticando pelo usuÃ¡rio e livro
    async returnBookByUserAndBook(NUSP, password, book_id) {
        console.log(`ðŸ”µ [LoansService] Iniciando devoluÃ§Ã£o por NUSP=${NUSP}, book_id=${book_id}`);
        // 1. Busca usuÃ¡rio
        const user = await UsersModel.getUserByNUSP(NUSP);
        if (!user) {
            console.warn(`ðŸŸ¡ [LoansService] UsuÃ¡rio NUSP ${NUSP} nÃ£o encontrado`);
            throw new Error('UsuÃ¡rio nÃ£o encontrado');
        }

        // 2. Verifica senha
        const passwordMatch = await bcrypt.compare(password, user.password_hash);
        if (!passwordMatch) {
            console.warn(`ðŸŸ¡ [LoansService] Senha incorreta para NUSP ${NUSP}`);
            throw new Error('Senha incorreta');
        }

        // 3. Busca emprÃ©stimo ativo desse usuÃ¡rio para o livro
        const loan = await LoansModel.getActiveLoanByUserAndBook(user.id, book_id);
        if (!loan) {
            console.warn(`ðŸŸ¡ [LoansService] Nenhum emprÃ©stimo ativo encontrado para usuÃ¡rio ${user.id} e livro ${book_id}`);
            throw new Error('Nenhum emprÃ©stimo ativo encontrado para este usuÃ¡rio e livro');
        }

        // 4. Marca como devolvido
        const result = await LoansModel.returnLoan(loan.loan_id || loan.id);
        console.log(`ðŸŸ¢ [LoansService] DevoluÃ§Ã£o registrada para emprÃ©stimo:`, result);
        return result;
    }

    // Registra devoluÃ§Ã£o de um emprÃ©stimo apenas pelo id do livro
    async returnBookByBookId(book_id) {
        // Busca o emprÃ©stimo ativo para o livro
        const loanRow = await LoansModel.getActiveLoanByBookId(book_id);
        if (!loanRow) {
            console.warn(`ðŸŸ¡ [LoansService] Nenhum emprÃ©stimo ativo encontrado para o livro ${book_id}`);
            throw new Error('Nenhum emprÃ©stimo ativo encontrado para este livro');
        }
        // Buscar detalhes do emprÃ©stimo para obter student_id
        const allLoans = await LoansModel.getLoansWithDetails();
        const loan = allLoans.find(l => l.loan_id === loanRow.loan_id);
        // Marca como devolvido
        const result = await LoansModel.returnLoan(loanRow.loan_id);
        // Envia email de confirmaÃ§Ã£o de devoluÃ§Ã£o
        if (loan) {
            await EmailService.sendReturnConfirmationEmail({
                user_id: loan.student_id,
                book_title: loan.book_title || book_id,
                returnedAt: new Date()
            });
        } else {
            console.warn(`[LoansService] NÃ£o foi possÃ­vel encontrar detalhes do emprÃ©stimo para enviar email de devoluÃ§Ã£o.`);
        }
        console.log(`ðŸŸ¢ [LoansService] DevoluÃ§Ã£o registrada para emprÃ©stimo:`, result);
        return result;
    }

    // Lista todos os emprÃ©stimos ativos com detalhes e status de atraso
    async listActiveLoansWithOverdue() {
        console.log("ðŸ”µ [LoansService] Listando emprÃ©stimos ativos com status de atraso");
        const [loans, rules] = await Promise.all([
            LoansModel.getActiveLoansWithDetails(),
            RulesService.getRules()
        ]);
        const maxDays = rules.max_days;
        const now = new Date();
        const result = loans.map(loan => {
            const borrowedAt = new Date(loan.borrowed_at);
            const dueDate = new Date(borrowedAt);
            dueDate.setDate(borrowedAt.getDate() + maxDays);
            const is_overdue = now > dueDate;
            return { ...loan, due_date: dueDate.toISOString(), is_overdue };
        });
        console.log(`ðŸŸ¢ [LoansService] EmprÃ©stimos ativos processados: ${result.length}`);
        return result;
    }
}

module.exports = new LoansService();