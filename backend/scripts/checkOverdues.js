// Script para verificar empr√©stimos atrasados e notificar usu√°rios
const LoansService = require('../src/services/LoansService');
const NotificationsService = require('../src/services/NotificationsService');
const RulesService = require('../src/services/RulesService');
const EmailService = require('../src/services/EmailService');

async function main() {
  console.log('üîµ [checkOverdues] Iniciando verifica√ß√£o de atrasos...');
  try {
    const rules = await RulesService.getRules();
    const reminderDays = rules.overdue_reminder_days || 3;
    const loans = await LoansService.listActiveLoansWithOverdue();
    const overdueLoans = loans.filter(loan => loan.is_overdue);
    console.log(`üü¢ [checkOverdues] Empr√©stimos atrasados encontrados: ${overdueLoans.length}`);
    for (const loan of overdueLoans) {
      // Cria notifica√ß√£o interna de atraso
      const notificationId = await NotificationsService.createOverdueNotificationIfNotExists(loan);
      // Envia email de atraso se a notifica√ß√£o foi criada agora (ou seja, n√£o existia antes)
      if (notificationId) {
        await EmailService.sendOverdueEmail({ user_id: loan.student_id, books: [loan] });
      }
      // Lembrete peri√≥dico
      const reminderId = await NotificationsService.createOverdueReminderIfDue(loan, reminderDays);
      // Envia email de lembrete se o lembrete foi criado agora (ou seja, n√£o existia ou j√° passou o per√≠odo)
      if (reminderId) {
        await EmailService.sendOverdueReminderEmail({ user_id: loan.student_id, books: [loan] });
      }
    }
    console.log('üü¢ [checkOverdues] Verifica√ß√£o conclu√≠da.');
  } catch (err) {
    console.error('üî¥ [checkOverdues] Erro ao verificar atrasos:', err);
    process.exit(1);
  }
}

main();
