import { useState } from "react";

/**
 * Hook para registrar devoluÃ§Ã£o de emprÃ©stimo.
 * PadrÃ£o de logs:
 * ğŸ”µ InÃ­cio de operaÃ§Ã£o
 * ğŸŸ¢ Sucesso
 * ğŸŸ¡ Aviso/Fluxo alternativo
 * ğŸ”´ Erro
 */
interface ReturnLoanParams {
  book_id: number;
  loan_id?: number; 
}

export function useReturnLoan() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean>(false);

  const returnLoan = async (params: ReturnLoanParams) => {
    setLoading(true);
    setError(null);
    setSuccess(false);
    try {
      console.log("ğŸ”µ [useReturnLoan] Registrando devoluÃ§Ã£o:", params);
      const res = await fetch("/api/loans/return", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });
      if (!res.ok) {
        const data = await res.json();
        console.error("ğŸ”´ [useReturnLoan] Erro ao registrar devoluÃ§Ã£o:", data.error);
        throw new Error(data.error || "Erro ao registrar devoluÃ§Ã£o");
      }
      setSuccess(true);
      console.log("ğŸŸ¢ [useReturnLoan] DevoluÃ§Ã£o registrada com sucesso");
      return true;
    } catch (err: any) {
      setError(err.message || "Erro desconhecido");
      console.error("ğŸ”´ [useReturnLoan] Erro ao registrar devoluÃ§Ã£o:", err);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return { returnLoan, loading, error, success };
}